# requirements.txt - list all the packages the project needs
#
# In this file, ignore hashes (#) - they are just used to create comments.
# Lines starting with a hash are ignored when installing packages using this file. 

# ======================================================
# IMPORTANT: The contents of this file varies by project 
# ======================================================

# Some common dependencies are provided in this example.
# Comment them in or out as you need them.

# ======================================================
# STEP A - CREATE A LOCAL PROJECT VIRTUAL ENV (.venv)
# ======================================================

# Create your local project virtual environment
# This step ensures you have an isolated Python environment for your project.
# This is typically just done once at the beginning of a project.
# If it gets messed up, we can delete .venv and recreate it at any time. 

# Run the following command to create a virtual environment in the project root.
### On Windows, Use PowerShell (not cmd) - don't include the #:
# py -m venv .venv

### On Mac/Linux, Use zsh or bash (or PowerShell) - don't include the #:
# python3 -m venv .venv

### If VS Code asks: We noticed a new environment has been created. 
# Do you want to select it for the workspace folder?
# Click Yes. 

# ======================================================
# STEP A (ADVANCED OPTION) - ONLY USE IF REQUIRED
# ======================================================

### IMPORTANT: 
### If the project requires a large tool like Apache Kafka or Spark,
### we may need to install an earlier version of Python
### and specify the required version when we create the virtual environment. 
### On Windows, Use PowerShell (not cmd) - don't include the #:
# py -3.11 -m venv .venv
### On Mac/Linux, Use zsh or bash (or PowerShell) - don't include the #:
# python3 -3.11 -m venv .venv

# ======================================================
# STEP B - ALWAYS ACTIVATE THE (.venv) WHEN OPENING A NEW TERMINAL
# ======================================================

# ALWAYS activate the .venv before working on the project.
# Activate whenever you open a new terminal. 

### Windows PowerShell Command (don't include the #):
# .\.venv\Scripts\activate

### Mac/Linux Command (don't include the #):
# source .venv/bin/activate

# Verify: When active, you can usually see (.venv) in the terminal.

# If using a Jupyter notebook, select the kernel associated with your project (.venv).

# ======================================================
# STEP C - INSTALL PACKAGES INTO (.venv) AS NEEDED
# ======================================================

# Install necessary packages listed below with this command:
# Keep packages updated with the most recent versions.

# When you identify a new package you want to use, 
# Just update the list below and re-run this command. 

### Windows Command (don't include the #):
# py -m pip install --upgrade pip setuptools wheel
# py -m pip install -r requirements.txt

### Mac/Linux Command (don't include the #):
# python3 -m pip install --upgrade pip setuptools wheel
# python3 -m pip install --upgrade -r requirements.txt

# When you identify a new package you want to use, 
# Just update the list below and re-run the install command. 

# ======================================================
# VS CODE: Select Interpreter
# ======================================================
# VS Code needs our populated .venv to interpret our files correctly.
# To set the VS Code Interpreter:
# 1. Open the Command Palette: Press Ctrl+Shift+P (Windows/Linux) or Cmd+Shift+P (Mac).
# 2. Search for "Python: Select Interpreter":
# 3. Type Python: Select Interpreter in the Command Palette search bar and select it from the dropdown.
# 4. Choose an Interpreter - A list of available Python environments will appear.
#    Look for the local .venv option.
# 5. Once selected, check the Python version displayed 
#    in the bottom-left corner of the VS Code window in the status bar.

# ======================================================
# ESSENTIAL TOOLS - UNCOMMENT THE NECESSARY ONES BELOW
# ======================================================

# Up-to-date package management tools
pip
setuptools
wheel

# Easy logging for monitoring code execution
# loguru

# Environment variables management
# python-dotenv

# ======================================================
# TEXT-TO-SPEECH
# ======================================================
# Offline text-to-speech library for Python (1-15 MB)
# pyttsx3  

# ======================================================
# JUPYTER (OPTIONAL, NEEDED FOR NOTEBOOKS)
# ======================================================

# Core IPython package that provides an enhanced interactive Python shell (10-15 MB).
ipython

# Core Jupyter functionality required for running notebooks in VS Code (50-60 MB).
jupyter

# Kernel interface for Jupyter notebooks (required for proper kernel registration)
ipykernel

# Interactive widgets (often used in notebooks).
ipywidgets


# ======================================================
# DATA ANALYSIS 
# ======================================================

# Numerical computations and arrays (20-30 MB)
numpy

# Data manipulation and analysis (built on numpy, 10-20 MB)
pandas

# ======================================================
# VISUALIZATION
# ======================================================

# Core library for creating visualizations (~30 MB)
matplotlib

# Statistical data visualization library built on matplotlib (~2-5 MB)
seaborn

# Interactive plotting library, often used with Shiny apps (~20-25 MB)
#plotly

# ======================================================
# CONTINUOUS INTELLIGENCE AND INTERACTIVE ANALYTICS
# ======================================================

# Shiny framework for Python applications (~5-10 MB)
#shiny

# ======================================================
# KAFKA STREAMING MESSAGE BROKER INTEGRATION
# ======================================================

# Apache Kafka Python client (~1 MB)
#kafka-python

# ======================================================
# STREAM PROCESSING - CAN BE VERY LARGE
# ======================================================

# Streaming data processing framework (~200-250 MB)
#pyspark<4.0.0

# ======================================================
# MACHINE LEARNING (ML)
# ======================================================

# Core ML library with flexible APIs (~40-50 MB)
# Keep it commented out the FIRST time you run pip install from requirements.txt
# Uncomment it the SECOND time you run pip install from requirements.txt
# Otherwise, it's too much work and takes too long. Two steps is better. 
scikit-learn

# ======================================================
# NATURAL LANGUAGE PROCESSING (NLP) - CAN BE VERY LARGE
# ======================================================

# NLP library for text processing (~10 MB core library; downloading corpora can add ~1 GB).
#nltk

# SpaCy: A powerful NLP library ~50 MB (core library; language models + ~300 MB or more per model).
#spacy

# ======================================================
# OPTIONAL - EXPORT SPECIFIC PACKAGE VERSIONS
# ======================================================
# In a terminal, run the following command to export the specific package versions to a file:
#pip freeze > rv.txt